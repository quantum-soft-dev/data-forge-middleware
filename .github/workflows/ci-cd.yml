name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - release
      - develop
      - 'feature/**'
      - 'bugfix/**'
      - 'hotfix/**'
      - '[0-9]*/**'
  pull_request:
    branches:
      - main
      - release
      - develop

env:
  JAVA_VERSION: '21'
  JAVA_DISTRIBUTION: 'temurin'

jobs:
  # Determine which workflow to run based on branch
  setup:
    runs-on: ubuntu-latest
    outputs:
      run_full_pipeline: ${{ steps.check_branch.outputs.run_full_pipeline }}
    steps:
      - name: Check branch for full pipeline
        id: check_branch
        run: |
          BRANCH_NAME="${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}"
          echo "Branch name: $BRANCH_NAME"

          if [[ "$BRANCH_NAME" == "main" || "$BRANCH_NAME" == "release" || "$BRANCH_NAME" == "develop" ]]; then
            echo "run_full_pipeline=true" >> $GITHUB_OUTPUT
            echo "Running full CI/CD pipeline"
          else
            echo "run_full_pipeline=false" >> $GITHUB_OUTPUT
            echo "Running tests only"
          fi

  # Job 1: Build and Test (always runs)
  test:
    runs-on: ubuntu-latest
    needs: setup

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRIBUTION }}
          cache: 'gradle'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Run tests
        run: ./gradlew test --no-daemon

      - name: Generate test report
        if: always()
        run: ./gradlew jacocoTestReport

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            build/reports/tests/
            build/test-results/

      - name: Upload coverage report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: build/reports/jacoco/

  # Job 2: Code Quality (only for full pipeline)
  code-quality:
    runs-on: ubuntu-latest
    needs: [setup, test]
    if: needs.setup.outputs.run_full_pipeline == 'true'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRIBUTION }}
          cache: 'gradle'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Run checkstyle
        run: ./gradlew checkstyleMain checkstyleTest || true

      - name: Run SpotBugs
        run: ./gradlew spotbugsMain || true

  # Job 3: Dependency Analysis (only for full pipeline)
  dependency-analysis:
    runs-on: ubuntu-latest
    needs: [setup, test]
    if: needs.setup.outputs.run_full_pipeline == 'true'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRIBUTION }}
          cache: 'gradle'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Verify dependencies
        run: ./gradlew dependencies --configuration runtimeClasspath > build/reports/dependencies.txt || true

      - name: Upload dependency report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: dependency-report
          path: build/reports/dependencies.txt

  # Job 4: Build Application (only for full pipeline)
  build:
    runs-on: ubuntu-latest
    needs: [setup, test, code-quality, dependency-analysis]
    if: needs.setup.outputs.run_full_pipeline == 'true'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRIBUTION }}
          cache: 'gradle'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build application
        run: ./gradlew build -x test --no-daemon

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: application-jar
          path: build/libs/*.jar

  # Job 5: Build Docker Image (only for full pipeline)
  docker-build:
    runs-on: ubuntu-latest
    needs: [setup, build]
    if: needs.setup.outputs.run_full_pipeline == 'true'
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Job 6: Deploy (only for main/release branches)
  deploy:
    runs-on: ubuntu-latest
    needs: [setup, docker-build]
    if: |
      needs.setup.outputs.run_full_pipeline == 'true' &&
      github.event_name != 'pull_request' &&
      (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/release')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging (main branch)
        if: github.ref == 'refs/heads/main'
        run: |
          echo "Deploying to staging environment..."
          # Add your deployment commands here
          # Example: kubectl apply -f k8s/staging/

      - name: Deploy to production (release branch)
        if: github.ref == 'refs/heads/release'
        run: |
          echo "Deploying to production environment..."
          # Add your deployment commands here
          # Example: kubectl apply -f k8s/production/

  # Summary job
  summary:
    runs-on: ubuntu-latest
    needs: [setup, test, code-quality, dependency-analysis, build, docker-build, deploy]
    if: always()

    steps:
      - name: Pipeline summary
        run: |
          echo "### CI/CD Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Pipeline Type:** ${{ needs.setup.outputs.run_full_pipeline == 'true' && 'Full CI/CD' || 'Tests Only' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Job Status:**" >> $GITHUB_STEP_SUMMARY
          echo "- Tests: ${{ needs.test.result }}" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ needs.setup.outputs.run_full_pipeline }}" == "true" ]]; then
            echo "- Code Quality: ${{ needs.code-quality.result }}" >> $GITHUB_STEP_SUMMARY
            echo "- Dependency Analysis: ${{ needs.dependency-analysis.result }}" >> $GITHUB_STEP_SUMMARY
            echo "- Build: ${{ needs.build.result }}" >> $GITHUB_STEP_SUMMARY
            echo "- Docker Build: ${{ needs.docker-build.result }}" >> $GITHUB_STEP_SUMMARY

            if [[ "${{ needs.deploy.result }}" != "skipped" ]]; then
              echo "- Deploy: ${{ needs.deploy.result }}" >> $GITHUB_STEP_SUMMARY
            fi
          fi
