version: '3.9'

services:
  postgres:
    image: postgres:16-alpine
    container_name: dfm-postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      # Multiple databases will be created via init script
      POSTGRES_MULTIPLE_DATABASES: dfm,keycloak
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d dfm && pg_isready -U postgres -d keycloak"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - dfm-network

  localstack:
    image: localstack/localstack:latest
    container_name: dfm-localstack
    environment:
      SERVICES: s3
      DEFAULT_REGION: us-east-1
      DATA_DIR: /tmp/localstack/data
      DEBUG: 1
    ports:
      - "4566:4566"
    volumes:
      - localstack_data:/tmp/localstack
      - /var/run/docker.sock:/var/run/docker.sock
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4566/_localstack/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - dfm-network

  keycloak:
    image: quay.io/keycloak/keycloak:26.0.0
    container_name: dfm-keycloak
    environment:
      # Admin credentials
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      # Database configuration
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres:5432/keycloak
      KC_DB_USERNAME: keycloak
      KC_DB_PASSWORD: keycloak_password
      KC_DB_SCHEMA: public
      # HTTP configuration
      KC_HTTP_PORT: 8080
      KC_HTTP_ENABLED: true
      KC_HOSTNAME_STRICT: false
      KC_HOSTNAME_STRICT_HTTPS: false
      KC_PROXY: edge
      # Health checks
      KC_HEALTH_ENABLED: true
      KC_METRICS_ENABLED: true
    command:
      - start-dev
      - --import-realm
    ports:
      - "8081:8080"
    volumes:
      - keycloak_data:/opt/keycloak/data
      - ./docker/keycloak/dfm-realm.json:/opt/keycloak/data/import/dfm-realm.json:ro
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health/ready"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - dfm-network

  dfm-backend:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: dfm-backend
    environment:
      # Spring profiles
      SPRING_PROFILES_ACTIVE: prod
      # Database
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/dfm
      SPRING_DATASOURCE_USERNAME: dfm
      SPRING_DATASOURCE_PASSWORD: dfm_password
      # S3
      AWS_S3_ENDPOINT: http://localstack:4566
      AWS_S3_REGION: us-east-1
      AWS_ACCESS_KEY_ID: test
      AWS_SECRET_ACCESS_KEY: test
      AWS_S3_BUCKET_NAME: dfm-uploads
      # Keycloak
      SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_ISSUER_URI: http://keycloak:8080/realms/dfm
      SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_JWK_SET_URI: http://keycloak:8080/realms/dfm/protocol/openid-connect/certs
      # JWT
      JWT_SECRET: change-this-secret-in-production-minimum-256-bits-required-for-hmac-sha256-algorithm
      JWT_EXPIRATION: 86400
      # Logging
      LOGGING_LEVEL_ROOT: INFO
      LOGGING_LEVEL_COM_BITBI_DFM: DEBUG
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
      localstack:
        condition: service_healthy
      keycloak:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 90s
    networks:
      - dfm-network

volumes:
  postgres_data:
  localstack_data:
  keycloak_data:

networks:
  dfm-network:
    driver: bridge
